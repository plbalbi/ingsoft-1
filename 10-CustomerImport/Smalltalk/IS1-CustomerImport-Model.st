Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: 'test'!!Customer class methodsFor: 'importing' stamp: 'Pablo 6/20/2018 15:20'!importCustomers: anInputStream	test importCustomers: anInputStream! !TestCase subclass: #ImportCustomerTests	instanceVariableNames: 'session inputStream'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ImportCustomerTests methodsFor: 'tests' stamp: 'Pablo 6/20/2018 15:31'!test01		| importedCustomers customers |	importedCustomers := self importCustomersFrom: inputStream .	session beginTransaction .	customers := session selectAllOfType: Customer.
	self assert: customers size equals: 2.	self assert: (customers anySatisfy: [ :importedCustomer | 		importedCustomer firstName = 'Pepe' &		importedCustomer lastName = 'Sanchez' ]).	self assert: (customers anySatisfy: [ :importedCustomer | 		importedCustomer firstName = 'Juan' &		importedCustomer lastName = 'Perez' ])	! !!ImportCustomerTests methodsFor: 'tests' stamp: 'Pablo 6/20/2018 16:41'!test02	| importedCustomers customers pepeSanchez juanPerez |		importedCustomers := self importCustomersFrom: inputStream.	session beginTransaction.	customers := session selectAllOfType: Customer.	pepeSanchez := customers		detect: [ :customer | customer firstName = 'Pepe' ].	juanPerez := customers		detect: [ :customer | customer firstName = 'Juan' ].	self assert: pepeSanchez addresses size equals: 2.	self assert: juanPerez addresses size equals: 1.	self		assert:			(pepeSanchez addresses				anySatisfy: [ :address | 					address streetName = 'San Martin' & address streetNumber = 3322						& address town = 'Olivos' & address zipCode = 1636						& address province = 'BsAs' ])! !!ImportCustomerTests methodsFor: 'importing' stamp: 'Pablo 6/20/2018 14:49'!initializeSession	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).! !!ImportCustomerTests methodsFor: 'importing' stamp: 'PabloBalbi 6/18/2018 20:54'!tearDown	session close! !!ImportCustomerTests methodsFor: 'importing' stamp: 'Pablo 6/20/2018 16:32'!dummyInputStream	| inputString |	inputString := 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'.	^(ReadWriteStream with: inputString) reset! !!ImportCustomerTests methodsFor: 'importing' stamp: 'Pablo 6/20/2018 16:44'!importCustomersFrom: anInputStream	| newCustomer line |	session beginTransaction.	line := anInputStream nextLine.	[ line notNil ]		whileTrue: [ (line beginsWith: 'C')				ifTrue: [ | customerData |					customerData := line substrings: {$,}.					"If this is not the first found, it means the are at least two customer. Persist the former one."					newCustomer notNil ifTrue: [ session persist: newCustomer ].					newCustomer := Customer new.					newCustomer firstName: customerData second.					newCustomer lastName: customerData third.					newCustomer identificationType: customerData fourth.					newCustomer identificationNumber: customerData fourth.					].			(line beginsWith: 'A')				ifTrue: [ | addressData newAddress |					addressData := line substrings: {$,}.					newAddress := Address new.					newAddress streetName: addressData second.					newAddress streetNumber: addressData third asInteger.					newAddress town: addressData fourth.					newAddress zipCode: addressData fifth asInteger.					newAddress province: addressData sixth.					newCustomer addAddress: newAddress.					session persist: newAddress. ].			line := anInputStream nextLine ].	" Last customer found should be persisted manually"	session persist: newCustomer.	session commit.	inputStream close! !!ImportCustomerTests methodsFor: 'importing' stamp: 'Pablo 6/20/2018 15:54'!setUp	self initializeSession.	session open.	inputStream := self dummyInputStream.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ImportCustomerTests class	instanceVariableNames: 'test'!