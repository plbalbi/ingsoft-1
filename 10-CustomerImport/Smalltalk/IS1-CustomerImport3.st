Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'importing' stamp: 'PauloOlveira 6/27/2018 00:51'!isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ self identificationType = anIdentifycationType		and: [ self identificationNumber = anIdentificationNumber ]! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'PauloOlveira 6/27/2018 00:19'!assertNothingWasImported	self assert: customerSystem allCustomers isEmpty.	^ self assert:		customerSystem allAddresses isEmpty! !!CustomerImportTest methodsFor: 'asserting' stamp: 'PauloOlveira 6/27/2018 00:18'!assertImportedCustomersSizeIsCorrect	self assert: customerSystem allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/1/2016 15:17'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/24/2018 16:45'!firstSavedButSecondFailInput	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresJ'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/21/2018 20:31'!emptyInput	^ReadStream on: ''.! !!CustomerImportTest methodsFor: 'test data' stamp: 'PauloOlveira 6/25/2018 16:45'!nonNumericAddressRecordInput	^ReadStream on: 'C,Pepe,Sanchez,D,22333444A,San Martin,Numero1,Olivos,Numero2,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/21/2018 21:05'!firstRecordIsAddressInput	^ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/21/2018 20:38'!invalidCustomerRecordInput	^ReadStream on: 'C,Pepe,Sanchez'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/21/2018 20:46'!invalidAddressRecordInput	^ReadStream on: 'A,calle falsa,1'! !!CustomerImportTest methodsFor: 'test data' stamp: 'Pablo 6/21/2018 20:22'!invalidTypeInput	^ReadStream on: 	'J'! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'PauloOlveira 6/27/2018 00:45'!setUp	customerSystem := TransientCustomerSystem new.	customerSystem start.	customerSystem beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'PauloOlveira 6/26/2018 23:58'!tearDown	customerSystem session commit.	customerSystem session close! !!CustomerImportTest methodsFor: 'importing' stamp: 'PauloOlveira 6/27/2018 00:31'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ customerSystem		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!CustomerImportTest methodsFor: 'testing' stamp: 'PauloOlveira 6/26/2018 23:58'!test04FailWhenNotEnoughFieldsInCustomerRecord	self		should: [ (CustomerImporter from: self invalidCustomerRecordInput in: customerSystem session) import ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :error | 			self				assert: error messageText				equals: CustomerImporter missingCustomerRecordFieldsError.				self assertNothingWasImported ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'PauloOlveira 6/26/2018 23:58'!test01ImportCustomers		(CustomerImporter from: self validTestData in: customerSystem session) import.		self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'PauloOlveira 6/26/2018 23:58'!test08FailWhenNumericFieldDataIsNotNumericInAddressRecord	self		should: [ (CustomerImporter from: self nonNumericAddressRecordInput   in: customerSystem session) import ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :error | 			self				assert: error messageText				equals: CustomerImporter nonNumericAddressRecordFieldsError]! !!CustomerImportTest methodsFor: 'testing' stamp: 'PauloOlveira 6/26/2018 23:58'!test07ImporterSavesOneCustomerButFailsInSecondOne"The error being tested is invalidRecord type, but it could be any other one"	self		should: [ (CustomerImporter from: self firstSavedButSecondFailInput in: customerSystem session) import ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :error |			self				assert: error messageText				equals: CustomerImporter invalidRecordTypeError.				self assert: ((customerSystem session selectAllOfType: Customer) size) equals: 1.				self assertPepeSanchezWasImportedCorrectly ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'PauloOlveira 6/26/2018 23:58'!test02ImportingStreamWithNoDataGivesDatabaseEmpty		(CustomerImporter from: self emptyInput  in: customerSystem session) import.		self assertNothingWasImported.! !!CustomerImportTest methodsFor: 'testing' stamp: 'PauloOlveira 6/26/2018 23:58'!test03FailWhenFieldIsNeitherACustomerNorAnAddress	self		should: [ (CustomerImporter from: self invalidTypeInput in: customerSystem session) import ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :error | 			self				assert: error messageText				equals: CustomerImporter invalidRecordTypeError.				self assertNothingWasImported ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'PauloOlveira 6/26/2018 23:58'!test05FailWhenNotEnoughFieldsInAddressRecord	self		should: [ (CustomerImporter from: self invalidAddressRecordInput in: customerSystem session) import ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :error | 			self				assert: error messageText				equals: CustomerImporter missingAddressRecordFieldsError.				self assertNothingWasImported ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'PauloOlveira 6/26/2018 23:58'!test06FailWhenSavingAddressToNonExistingCustomer	self		should: [ (CustomerImporter from: self firstRecordIsAddressInput in: customerSystem session) import ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :error | 			self				assert: error messageText				equals: CustomerImporter cannotSaveAddressWithoutACustomerError.				self assertNothingWasImported ]! !Object subclass: #CustomerImporter	instanceVariableNames: 'line record newCustomer session newAddress inputStream'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'errors' stamp: 'Pablo 6/24/2018 16:53'!failIfFieldsCountIsNot: expectedFields With: error	record size == expectedFields		ifFalse: [ self error: error ]! !!CustomerImporter methodsFor: 'errors' stamp: 'Pablo 6/24/2018 16:56'!failOnNoCustomer	newCustomer isNil		ifTrue: [ self error: self class cannotSaveAddressWithoutACustomerError ]! !!CustomerImporter methodsFor: 'errors' stamp: 'PauloOlveira 6/25/2018 16:44'!failOnNonNumericFieldAddress	record third isAllDigits		ifFalse: [ self error: self class nonNumericAddressRecordFieldsError ].	record fifth isAllDigits		ifFalse: [ self error: self class nonNumericAddressRecordFieldsError ]! !!CustomerImporter methodsFor: 'initialization' stamp: 'Pablo 6/21/2018 20:13'!initializeWith: aSession importingFrom: aStream	session := aSession.	inputStream := aStream. 	! !!CustomerImporter methodsFor: 'importing' stamp: 'Pablo 6/21/2018 21:19'!import	self nextLine.	[ line notNil ]		whileTrue: [ 			self extractLineToRecord.			self lineIsCustomer ifTrue: [ self importCustomer ].			self lineIsAddress ifTrue: [ self importAddress ].			self lineIsUndefinedType ifTrue: [ self error: self class invalidRecordTypeError ].			self nextLine  ]! !!CustomerImporter methodsFor: 'constants' stamp: 'Pablo 6/24/2018 16:55'!expectedAddressFieldsCount	^ 6! !!CustomerImporter methodsFor: 'constants' stamp: 'Pablo 6/24/2018 16:56'!expectedCustomerFieldsCount	^ 5! !!CustomerImporter methodsFor: 'parsing' stamp: 'Pablo 6/21/2018 20:08'!nextLine	line := inputStream nextLine! !!CustomerImporter methodsFor: 'parsing' stamp: 'Pablo 6/21/2018 19:54'!lineIsCustomer	^ line beginsWith: 'C'! !!CustomerImporter methodsFor: 'parsing' stamp: 'Pablo 6/24/2018 16:56'!importCustomer	self		failIfFieldsCountIsNot: self expectedCustomerFieldsCount		With: self class missingCustomerRecordFieldsError.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	session persist: newCustomer! !!CustomerImporter methodsFor: 'parsing' stamp: 'Pablo 6/21/2018 19:59'!extractLineToRecord	record := line substrings: {$,}! !!CustomerImporter methodsFor: 'parsing' stamp: 'Pablo 6/21/2018 21:19'!lineIsUndefinedType	^(self lineIsAddress | self lineIsCustomer) not! !!CustomerImporter methodsFor: 'parsing' stamp: 'Pablo 6/21/2018 20:29'!lineIsAddress	^ line beginsWith: 'A'! !!CustomerImporter methodsFor: 'parsing' stamp: 'PauloOlveira 6/25/2018 16:42'!importAddress	self		failIfFieldsCountIsNot: self expectedAddressFieldsCount		With: self class missingAddressRecordFieldsError.	self failOnNoCustomer.	self failOnNonNumericFieldAddress.	newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	newCustomer addAddress: newAddress! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error messages' stamp: 'PauloOlveira 6/25/2018 16:25'!nonNumericCustomerRecordFieldsError	^'Numeric field was not numeric en Customer Record'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'PauloOlveira 6/25/2018 16:25'!nonNumericAddressRecordFieldsError	^'Numeric field was not numeric en Address Record'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'Pablo 6/21/2018 20:24'!invalidRecordTypeError	^'Unknown record type encountered'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'Pablo 6/21/2018 21:11'!missingCustomerRecordFieldsError	^'Missing Customer record fields'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'Pablo 6/21/2018 21:08'!cannotSaveAddressWithoutACustomerError	^'Cannot save address if the are no customers yet'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'Pablo 6/21/2018 21:11'!missingAddressRecordFieldsError	^'Not enough fields in address records'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'Pablo 6/21/2018 20:11'!from: anInputStream in: aSession.	^self new initializeWith: aSession importingFrom: anInputStream.! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'asserting' stamp: 'PauloOlveira 6/27/2018 00:33'!allCustomers
	self subclassResponsibility! !!CustomerSystem methodsFor: 'asserting' stamp: 'PauloOlveira 6/27/2018 00:33'!allAddresses
	self subclassResponsibility! !!CustomerSystem methodsFor: 'importing' stamp: 'PauloOlveira 6/27/2018 00:33'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'PauloOlveira 6/27/2018 00:33'!beginTransaction
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'PauloOlveira 6/27/2018 00:33'!start
	self subclassResponsibility! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'PauloOlveira 6/27/2018 00:13'!initialize	self initializeSession ! !!PersistentCustomerSystem methodsFor: 'accessing' stamp: 'PauloOlveira 6/26/2018 23:58'!session	^ session! !!PersistentCustomerSystem methodsFor: 'accessing' stamp: 'PauloOlveira 6/26/2018 23:58'!session: anObject	session := anObject! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'PauloOlveira 6/27/2018 00:16'!beginTransaction	self session beginTransaction! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'PauloOlveira 6/27/2018 00:15'!start	self session open! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'PauloOlveira 6/27/2018 00:12'!initializeSession	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))))! !!PersistentCustomerSystem methodsFor: 'importing' stamp: 'PauloOlveira 6/27/2018 00:51'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |	customers := self session		select: [ :aCustomer | 			aCustomer				isIdentifiedAs: anIdentifycationType				numbered: anIdentificationNumber ]		ofType: Customer.	customers size = 1		ifFalse: [ self error: 'No se encontro el cliente' ].	^ customers anyOne! !!PersistentCustomerSystem methodsFor: 'asserting' stamp: 'PauloOlveira 6/27/2018 00:18'!allCustomers	^ self session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'asserting' stamp: 'PauloOlveira 6/27/2018 00:19'!allAddresses	^ self session selectAllOfType: Address! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientCustomerSystem methodsFor: 'initialization' stamp: 'PauloOlveira 6/27/2018 00:36'!initialize		customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'initialization' stamp: 'PauloOlveira 6/27/2018 00:37'!allCustomers	^customers copy! !!TransientCustomerSystem methodsFor: 'initialization' stamp: 'PauloOlveira 6/27/2018 00:42'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^customers detect: [ :aCustomer |aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'PauloOlveira 6/27/2018 00:46'!beginTransaction! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'PauloOlveira 6/27/2018 00:46'!start! !Object subclass: #ClassMapping	instanceVariableNames: 'mappedClass mappings tableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!ClassMapping methodsFor: 'testing' stamp: 'HernanWilkinson 10/31/2016 23:02'!isFor: aClass	^mappedClass = aClass! !!ClassMapping methodsFor: 'table' stamp: 'HernanWilkinson 10/31/2016 23:25'!tableName		^tableName ! !!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:42'!unmap: aRecord using: aDataBaseSession	| unMappedObject |	unMappedObject := mappedClass basicNew.	self unmapIdOf: aRecord into: unMappedObject.	self unmap: aRecord into: unMappedObject using: aDataBaseSession.	^ unMappedObject! !!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:40'!map: anObject using: aDataBaseSession	| record |	self toDo: 'se puede optimizar usando array para registros y guardando definicion de tabla una vez'.	record := Dictionary new.		self mapIdOf: anObject into: record using: aDataBaseSession.	self mapEmbededOf: anObject into: record.	"agrego aca el registro y no luego de mapear el id para que lo agrege completo. Lo agrego antes de mapear las rel one to many 	porque si usuara una db de verdad habria foreign key constrain"	aDataBaseSession add: record on: self tableName.	self mapOneToManyRelationshipsOf: anObject using: aDataBaseSession! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapEmbededOf: anObject into: record	mappings do: [ :aMapping | aMapping embeded: anObject into: record ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapIdOf: anObject into: record using: aDataBaseSession	| newId |	newId := aDataBaseSession newIdFor: anObject.	anObject instVarNamed: #id put: newId.	record at: #id put: newId! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmapIdOf: aRecord into: unMappedObject	unMappedObject instVarNamed: #id put: (aRecord at: #id)! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmap: aRecord into: unMappedObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping unmap: aRecord into: unMappedObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping mapOneToManyRelationshipsOf: anObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:25'!initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings	mappedClass := aClass.	tableName := aTableName.	mappings := aCollectionOfMappings ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClassMapping class	instanceVariableNames: ''!!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:44'!defaultTableNameFor: aClass		^aClass name asString! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:23'!withDefaultTableNameFor: aClass mappingAll: aCollectionOfMappings	^self for: aClass into: (self defaultTableNameFor: aClass) mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:24'!for: aClass into: aTableName mappingAll: aCollectionOfMappings	self assertValidTableName: aTableName.	self assertHasIdInstanceVariable: aClass.	self assertValidMappings: aCollectionOfMappings for: aClass.		^self new initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 21:15'!assertHasIdInstanceVariable: aClass 		(aClass hasInstVarNamed: #id) ifFalse: [ self error: ('<1s> has no id instance variable' expandMacrosWith: aClass name) ]! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 19:26'!assertValidMappings: aCollectionOfMappings for: aClass 	self toDo: 'Lo mejor seria recolectar todos los erroes de mapeo y no parar en el primero'.	aCollectionOfMappings do: [ :aMapping | aMapping assertIsValidFor: aClass ]	! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidTableName: aTableName	aTableName trimBoth isEmpty ifTrue: [ self error: 'Table name can not be empty' ]! !Object subclass: #DataBaseSession	instanceVariableNames: 'configuration tables id cache'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!DataBaseSession methodsFor: 'persistance' stamp: 'HernanWilkinson 11/1/2016 01:28'!persist: anObject	| mapper |		self assertInTransaction.	self delay.		mapper := self mapperFor: anObject class.	mapper map: anObject using: self.		self addToCache: anObject ! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass	| ownerClassMapper relatedClassMapper |		ownerClassMapper := self mapperFor: anOwnerClass.	relatedClassMapper := self mapperFor: aRelatedClass.		^ownerClassMapper tableName,'_', relatedClassMapper tableName asPlural.! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableFor: anOwnerClass relatedTo: aRelatedClass	| relationTableName table |	relationTableName := self relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass.	table := self tableNamed: relationTableName.		^ table! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 00:48'!tableNamed: aTableName	^ tables at: aTableName ifAbsentPut: [ Dictionary new ]! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:15'!relatedOfType: aRelatedClass for: anOwner	| table relatedIds |		table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := table at: (self idOf: anOwner) ifAbsent: [ ^#() ].		^relatedIds collect: [ :aRelatedId | self objectIdentifiedAs: aRelatedId ofType: aRelatedClass ]		! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:16'!unmapRecordIdentifiedAs: anId ofType: aClass	| record table mapper |	mapper := self mapperFor: aClass.	table := self tableNamed: mapper tableName.	record := table at: id ifAbsent: [ self error: ('Object identified as <1s> does not exist' expandMacrosWith: anId printString) ].		^ mapper unmap: record using: self! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:14'!mapperFor: aClass	self toDo: 'se puede mejorar performanco usando un dictionary'.	^configuration		detect: [ :aClassMapper | aClassMapper isFor: aClass ] 		ifNone: [ self error: ('There is no mapper for <1s>' expandMacrosWith: aClass name) ]! !!DataBaseSession methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 22:55'!initializeFor: aConfiguration	configuration := aConfiguration.	id := 0.	tables := nil.	cache := nil.! !!DataBaseSession methodsFor: 'selecting - private' stamp: 'HernanWilkinson 11/1/2016 01:28'!addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper	| recordId aClassInstance |	recordId := self recordId: record.	aClassInstance := cache at: recordId ifAbsent: [ mapper unmap: record using: self ].	(aCondition value: aClassInstance) ifTrue: [ 		self addToCache: aClassInstance.		selected add: aClassInstance ].		^ selected! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:04'!recordId: aRecord	^aRecord at: #id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:00'!idOf: anObject	^anObject instVarNamed: #id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 10/28/2016 16:35'!newIdFor: anObject	id := id + 1.	^id! !!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:41'!delay	(Delay forMilliseconds: 100) wait! !!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:35'!defineIdOf: anObject	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertInTransaction		cache isNil ifTrue: [ self error: 'There is no transaction currently' ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!beginTransaction	self assertIsOpen.	self assertNotInTransasction.		cache := WeakKeyDictionary new.	! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertNotInTransasction		cache notNil ifTrue: [ self error: 'There is an open transaction already' ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!commit		self assertInTransaction.		cache := nil! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:15'!objectIdentifiedAs: anId ofType: aClass	self assertInTransaction.	self delay.		^ cache at: anId ifAbsentPut: [ self unmapRecordIdentifiedAs: anId ofType: aClass ]! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:26'!select: aCondition ofType: aClass	| mapper table |	self assertInTransaction.	self delay.		mapper := self mapperFor: aClass.	table := tables at: mapper tableName ifAbsent: [ ^ #() ].		^ table inject: OrderedCollection new into: [ :selected :record | self addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper ]! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 10/31/2016 22:17'!selectAllOfType: aClass 		^self select: [ :anObject | true ] ofType: aClass! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:36'!open	self assertIsClose.		tables := Dictionary new.	! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 22:14'!close	self assertIsOpen.		tables := nil! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:37'!assertIsClose		tables isNil ifFalse: [ self error: 'Session must be close' ]! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:36'!assertIsOpen		tables isNil ifTrue: [ self error: 'Session must be open to colaborate with it' ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!add: aRecord on: aTableName	| table existingRecord |	table := self tableNamed: aTableName.	existingRecord := table at: (self recordId: aRecord) ifAbsentPut: [ aRecord ].	existingRecord == aRecord ifFalse: [ self error: 'Duplicated primary key' ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:06'!relatedIdOwnedBy: anOwner on: table	^ table at: (self idOf: anOwner) ifAbsentPut: [ Set new ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:05'!assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds	(relatedIds includes: relatedId) ifTrue: [ self signalRelationAlreadyExistBetween: anOwner and: aRelated ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!addRelated: aRelated ownedBy: anOwner	| relatedIds relatedId |	relatedIds := self relatedIdsOwnedBy: anOwner forType: aRelated class.	relatedId := aRelated instVarNamed: #id.	self assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds.		relatedIds add: relatedId! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:00'!signalRelationAlreadyExistBetween: anOwner and: aRelated 	self error: ('Relation between id <1s> of type <2s> and id <3s> of type <4s> already exist'		expandMacrosWith: (self idOf: anOwner) printString		with: anOwner class name		with: (self idOf: aRelated) printString		with: aRelated class name)! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:10'!relatedIdsOwnedBy: anOwner forType: aRelatedClass	| relatedIds table |	table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := self relatedIdOwnedBy: anOwner on: table.		^ relatedIds! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:27'!addToCache: anObject 	cache at: (self idOf: anObject) put: anObject ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DataBaseSession class	instanceVariableNames: ''!!DataBaseSession class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/28/2016 13:07'!for: aConfiguration	^self new initializeFor: aConfiguration! !Object subclass: #Mapping	instanceVariableNames: 'instanceVariableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!Mapping methodsFor: 'assertions' stamp: 'HernanWilkinson 11/1/2016 01:31'!assertIsValidFor: aClass 	(aClass hasInstVarNamed: instanceVariableName) ifFalse: [ 		self error: ('Invalid mapping for <1s> in class <2s>' expandMacrosWith: instanceVariableName with: aClass name) ] ! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!embeded: anObject into: aRecord	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!unmap: aRecord into: anObject using: aDataBaseSession	self subclassResponsibility! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mapping class	instanceVariableNames: ''!!Mapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 01:32'!defaultFieldNameFor: anInstanceVariableName	^anInstanceVariableName asString! !!Mapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidFieldName: aFieldName	aFieldName trimBoth isEmpty ifTrue: [ self error: 'Field name can not be empty' ]! !Mapping subclass: #EmbededMapping	instanceVariableNames: 'fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:23'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession 		! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!embeded: anObject into: aRecord	aRecord at: fieldName put: (anObject instVarNamed: instanceVariableName) ! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!unmap: aRecord into: anObject using: aDataBaseSession 	anObject instVarNamed: instanceVariableName put: (aRecord at: fieldName)! !!EmbededMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:30'!initializeFor: anInstanceVariableName into: aFieldName	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmbededMapping class	instanceVariableNames: ''!!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:30'!for: anInstanceVariableName into: aFieldName	^self new initializeFor: anInstanceVariableName into: aFieldName ! !!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:29'!withDefaultFieldNameFor: anInstanceVariableName	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName)! !Mapping subclass: #OneToManyMapping	instanceVariableNames: 'relatedType fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!OneToManyMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:34'!initializeFor: anInstanceVariableName into: aFieldName ofType: aClass	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName.	relatedType := aClass ! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:35'!createRelationCollectionOn: aDataBaseSession ownedBy: anObject	^ OneToManySet on: aDataBaseSession ownedBy: anObject! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	| oldCollection newCollection |	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	oldCollection := anObject instVarNamed: instanceVariableName.		newCollection addAll: oldCollection.	anObject instVarNamed: instanceVariableName put: newCollection! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:16'!embeded: anObject into: aRecord	! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!unmap: aRecord into: anObject using: aDataBaseSession	| newCollection related |	related := aDataBaseSession relatedOfType: relatedType for: anObject.	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	newCollection addAllNotPersisting: related.	anObject instVarNamed: instanceVariableName put: newCollection! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManyMapping class	instanceVariableNames: ''!!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:32'!withDefaultFieldNameFor: anInstanceVariableName ofType: aClass	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName) ofType: aClass! !!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:40'!for: anInstanceVariableName into: aFieldName ofType: aClass	self assertValidFieldName: aFieldName.		^self new initializeFor: anInstanceVariableName into: aFieldName ofType: aClass! !Set subclass: #OneToManySet	instanceVariableNames: 'session owner'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:11'!add: anObject	session persist: anObject.	session addRelated: anObject ownedBy: owner.		super add: anObject.! !!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:03'!addAllNotPersisting: aCollection 		^aCollection do: [ :anObjectToAdd | super add: anObjectToAdd ]! !!OneToManySet methodsFor: 'removing' stamp: 'HernanWilkinson 10/31/2016 21:35'!remove: anObject ifAbsent: anAbsentBlock	self shouldBeImplemented ! !!OneToManySet methodsFor: 'initialization' stamp: 'HernanWilkinson 11/1/2016 00:11'!initializeOn: aDataBaseSession ownedBy: anOwner		session := aDataBaseSession.	owner := anOwner ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManySet class	instanceVariableNames: ''!!OneToManySet class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:11'!on: aDataBaseSession ownedBy: anOwner		^self new initializeOn: aDataBaseSession ownedBy: anOwner ! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 27 June 2018 at 12:59:05.355841 am'!!String methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 23:57'!asPlural		^self last = $s 		ifTrue: [ self, 'es' ]		ifFalse: [ self, 's' ]! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 27 June 2018 at 12:59:05.356936 am'!!Object methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 19:27'!toDo: aString 	! !